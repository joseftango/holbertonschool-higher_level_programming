==========================
apply doctest in 1-my_list
==========================

``print_sorted()`` method of MyList class that print sorted list

import our class that contain print_sorted() method
	>>> MyList = __import__('1-my_list').MyList

let's use it :

Test case #0: Testing print_sorted() of a non sorted list of integers
>>> my_list = MyList()
>>> my_list.extend([1, 4, 2, 3, 5])
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

Test case #1: Testing print_sorted() of a desacending order list
>>> my_list = MyList()
>>> my_list.extend([5, 4, 3, 2, 1])
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

Test case #2: Testing print_sorted() of a non sorted negative and positive list
>>> my_list = MyList()
>>> my_list.extend([20, -4, 8, -15, 0, 5])
>>> my_list.print_sorted()
[-15, -4, 0, 5, 8, 20]

Test case #3: Testing print_sorted() of a non sorted negative list
my_list = MyList()
my_list.extend([-20, -4, -8, -15, -5, -100])
my_list.print_sorted()
[-100, -20, -15, -8, -5, -4]

Test case #4: Testing print_sorted() of an empty list
my_list = MyList()
my_list.extend([])
my_list.print_sorted()
[]

Test case #5: Testing __str__ method of MyList instance
>>> my_list = MyList()
>>> my_list.extend([1, 4, 2, 3, 5])
>>> str(my_list)
'[1, 4, 2, 3, 5]'
>>> my_list
[1, 4, 2, 3, 5]

Test case #6: Testing append() method of MyList instance
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list
[1, 4, 2, 3, 5]

Test case #7: Testing print_sorted() method returns a new list or not
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list
[1, 4, 2, 3, 5]
