=================================
apply doctest in 2-matrix_divided
=================================

This library is very simple, since it only has one function called
``matrix_divided()``.

``matrix_divided()`` returns division result of a matrix (list of list).

import our function matrix_divided()
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

let's use it :

----------------------------- testing second argument div ---------------------------------

>>> matrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided(matrix, 3621)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided(matrix, 60)
[[0.02, 0.03, 0.05], [0.07, 0.08, 0.1]]

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, -1)
[[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

>>> matrix_divided(matrix, -784)
[[-0.0, -0.0, -0.0], [-0.01, -0.01, -0.01]]

>>> matrix_divided(matrix, '3')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, 'hello')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, None)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, False)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, True)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, (5, 2))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, [1, 2, 3])
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, {'a': 5, 'b': 7})
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, {1, 2, 3})
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, )
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'


------------------------ testing first argument matrix ----------------------------------

>>> matrix_divided([[1.5, 2.6, 3.9], [4.71, 5.874, 6.3165]], 2)
[[0.75, 1.3, 1.95], [2.35, 2.94, 3.16]]

>>> matrix_divided([[-1.5, -2.6, -3.9], [-4.71, -5.874, -6.3165]], 2)
[[-0.75, -1.3, -1.95], [-2.35, -2.94, -3.16]]

>>> matrix_divided([[-4, -10, -30], [-50, -100, -206]], 2)
[[-2.0, -5.0, -15.0], [-25.0, -50.0, -103.0]]

>>> matrix_divided([[4, 10, 30], [50, 100, 206]], 2)
[[2.0, 5.0, 15.0], [25.0, 50.0, 103.0]]

>>> matrix_divided(None, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(True, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(80, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> matrix_divided(None, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(True, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(6.65415, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided("hello", 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(((2, 4, 6), (8, 10, 12)), 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([(2, 4, 6), (8, 10, 12)], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([2, 4, 6, 8, 10, 12], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided('[[4, 10, 30], [50, 100, 206]]', 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([['4', 10, 30], [50, 100, 206]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[4, 10, 30], [50, 100, '206']], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(['[4, 10, 30]', [50, 100, 206]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided({1: [4, 10, 30], 2: [50, 100, '206']}, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[4, 10], [50, 100, 206, 62]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix = [[3.54, -6.69, -4.20], [30.20, 44, -23.21], [9.554, -3.442, 2]]
>>> matrix_divided(matrix, 3)
[[1.18, -2.23, -1.4], [10.07, 14.67, -7.74], [3.18, -1.15, 0.67]]
