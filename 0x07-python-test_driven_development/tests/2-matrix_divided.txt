======================
testing matrix_divided
======================

Using ``matrix_divided``
------------------------

First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

    >>> mx = [[1, 2, 3],[4, 5, 6]]
    >>> matrix_divided(mx, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> mx = [ [8, 2, 4],[9, 5, 6] ]
    >>> matrix_divided(mx, 2)
    [[4.0, 1.0, 2.0], [4.5, 2.5, 3.0]]

    >>> mx = [ [18, 12, 44],[19, 25, 36] ]
    >>> matrix_divided(mx, 5)
    [[3.6, 2.4, 8.8], [3.8, 5.0, 7.2]]

    >>> matrix_divided(mx, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> mx = [ [18, 44],[19, 25, 36] ]
    >>> matrix_divided(mx, 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    >>> mx = [ [19, 25, 36], [18, 44] ]
    >>> matrix_divided(mx, 5)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    >>> mx = [ [19, "25", 36], [18, 44, 16] ]
    >>> matrix_divided(mx, 6)
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for /: 'str' and 'int'

    >>> mx = [ [19, 25, 36], [18, 44, 16], [10, 20, 30] ]
    >>> matrix_divided(mx, 6)
    [[3.17, 4.17, 6.0], [3.0, 7.33, 2.67], [1.67, 3.33, 5.0]]

    >>> mx = [ [19, 25, 36] ]
    >>> matrix_divided(mx, 6)
    [[3.17, 4.17, 6.0]]

    >>> mx = ([19, 25, 36])
    >>> matrix_divided(mx, 6)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> mx = None
    >>> matrix_divided(mx, 7)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
